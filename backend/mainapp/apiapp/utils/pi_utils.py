import base64
import urllib.parse
import requests
from requests_kerberos import HTTPKerberosAuth, OPTIONAL
import urllib3
import pandas as pd
# üîá –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ self-signed SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# üîº –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç WebID –∏–∑ raw –ø—É—Ç–∏ (—É–∂–µ URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ ‚Äî –Ω–µ –≤–∞–∂–Ω–æ)
def generate_web_id_raw(raw_encoded_path: str, id_type: str = 'Attributes') -> str:
    web_id_type = 'P'
    web_id_version = '1'
    markers = {
        'Attributes': 'Ab',
        'pipoint': 'DP',
        'unit': 'Ut'
    }
    web_id_base = 'E' if id_type == 'Attributes' else ''
    encoded = base64.b64encode(raw_encoded_path.encode('utf-8')).decode('utf-8')
    encoded = encoded.replace('+', '-').replace('/', '_').rstrip('=')
    return f"{web_id_type}{web_id_version}{markers[id_type]}{web_id_base}{encoded}"

# üåê –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
def get_value_at_time(web_id, iso_time_str):
    time_param = urllib.parse.quote(iso_time_str)
    url = f"https://kpcpdw08/piwebapi/streams/{web_id}/value?time={time_param}"

    print("üì° –ó–∞–ø—Ä–æ—Å:", url)

    response = requests.get(
        url,
        auth=HTTPKerberosAuth(mutual_authentication=OPTIONAL),
        verify=False
    )

    if response.status_code == 200:
        return response.json()
    else:
        print(f"‚ùå Error {response.status_code}: {response.text}")
        return None

BASE_URL = "https://kpcpdw08/piwebapi"


from typing import Optional

def get_time_series(
    web_id: str,
    start_time: str,
    end_time: str,
    interval: Optional[str] = None,
    max_count: int = 100_000,
):
    """
    –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ PI Web API.
    - interval=None ‚ûú —Å—ã—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (/recorded)
    - interval='1h', '5m' ‚Ä¶ ‚ûú –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (/interpolated)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame ['Timestamp', 'Value'] –±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞-–¥–∞—Ç—ã.
    """
    if interval:
        # –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        url = (
            f"{BASE_URL}/streams/{web_id}/interpolated"
            f"?startTime={start_time}&endTime={end_time}"
            f"&interval={interval}&selectedFields=Items.Timestamp;Items.Value"
        )
        resp = requests.get(url,
                            auth=HTTPKerberosAuth(mutual_authentication=OPTIONAL),
                            verify=False)
        resp.raise_for_status()
        items = resp.json().get("Items", [])

    else:
        # —Å—ã—Ä—ã–µ recorded (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
        url = (
            f"{BASE_URL}/streams/{web_id}/recorded"
            f"?startTime={start_time}&endTime={end_time}"
            f"&maxCount={max_count}&selectedFields=Items.Timestamp;Items.Value"
        )
        items = []
        while url:
            resp = requests.get(url,
                                auth=HTTPKerberosAuth(mutual_authentication=OPTIONAL),
                                verify=False)
            resp.raise_for_status()
            data = resp.json()
            items.extend(data.get("Items", []))
            url = data.get("Links", {}).get("NextPage")  # None ‚ûú –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º DataFrame
    return pd.DataFrame(
        {
            "Timestamp": pd.to_datetime([i["Timestamp"] for i in items]),
            "Value":     [i["Value"] for i in items],
        }
    )



